# ------------------------------------------------------------------------------------------------
# Properties that you should set in Jenkins job configurations (ant advanced config; they will ---
# be available to ant and also have precedence over what is defined in this file               ---
# ------------------------------------------------------------------------------------------------

# Enable parts of the build - by default all are disabled (you can run import-test client unit tests, mobile solutions unit tests, e2e tests or just export and deploy solutions)
#build.run.unit.tests                = yep
#build.run.mobile.unit.tests         = yep
#build.run.e2e.tests                 = yep
#build.deploy                        = yep

# Servoy developer installation that will be used for exporting/testing (a separate install
# is recommended for each Jenkins job in case multiple jobs are configured to run concurrently)

servoy.install.dir                  = [your_jenkins_dedicated_servoy_installation_dir]

# 'workspace.solutions.dir' property should be set to point to where your solutions can be found (equivalent to the developer workspace)

workspace.solutions.dir             = [the_root_of_the_workspace_containing_solutions]

# 'servoy.properties.dir' is a dir that contains the servoy.properties files to be used at each step during the build:
# exporter_servoy.properties - the properties file that the exporter will use internally when started
# unit_test_servoy.properties - for the jsunit tests
# e2e_test_servoy.properties - for the e2e tests 
# deploy_on_success_servoy.properties - for the war file that should be generated for deployment
# these can be overridden by directly setting each of the "[xyz].servoy.properties" (see below) props instead of "servoy.properties.dir" 

servoy.properties.dir               = ${workspace.solutions.dir}/build_files/servoy_properties_files

# Solutions to be exported and then tested;
# multiple solutions can be specified via a comma separated list of solution names

smart_test_solutions                = solution1,solution2

mobile_test_solutions               = mobile_ipAddressValidatorTester
mobile_service_solutions            = mobile_ipAddressValidatorTester_service

mobile_to_deploy                    = mobile_ipAddressValidator
mobile_to_deploy_services           = mobile_ipAddressValidator_service

ngclient_e2e_test_solutions         = solution1
solutions_to_deploy                 = solution1

# By default, solution and resources projects reside directly in the <workspace.solutions.dir>.
# Uncomment the following to send '-pl' argument to workspace solution exporters: it enables searching for
# solution (and resources) projects inside all subfolders (only the first level) of <workspace.solutions.dir>. 
# Example: if the workspace needs to contain projects from different git repositories, those can then be
# checked out in '<workspace.solutions.dir>/repo1', '<workspace.solutions.dir>/repo2' and so on

#alternate_project_locations.on      = yep

# Uncomment the following line/set this if you want exports that passed unit testing (generated by previous
# build) to NOT be deleted at the beginning of each build cycle; you probably won't ever need to keep those
# unless some tool watches those folders and you want to avoid triggering something due to those deletes

#dont_clean_passed_exports           = yep

# This URL is used when running mobile unit tests - as the mobile test war is deployed there (the install from servoy.install.dir above)

servoy.install.url                  = http://localhost:8080

# Selenium server jar used by mobile test client

selenium.server.jar                 = [path_to_downloaded_selenium_server_jar]

# SauceLabs credentials for e2e tests (and mobile unit test if needed)
#sauce.labs.user                     = [your Sauce Labs user here]
#sauce.labs.token                    = [access token goes here]

# For testing mobile clients in SauceLabs cloud: uncomment relevant lines in
# "run_mobile_client_tests_if_exported_ok" target of jenkins_build.xml; other changes might be needed as well, but this is the main idea

#sauce.labs.selenium.url             = http://${sauce.labs.user}:${sauce.labs.token}@localhost:${SAUCE_ONDEMAND_PORT}/wd/hub
# SAUCE_ONDEMAND_PORT used above is set by the the sauce jenkins plugin
# define a timeout for sauce labs to not require additional Selenium commands for a solution (set to 1.5 min; should be updated for how long your test can possibly take to run, but not much higher)
#sauce.labs.selenium.idle-timeout    = 90

# If you want your mobile solutions deployed (war copied) to a Servoy server after testing is done,
# uncomment / set values as in the following two lines and change the value of
# mobile.deploy.servoy.install.dir to point to it; passed .war files will be copied to mobile.deploy.webapps.dir location.

#mobile.deploy.servoy.install.dir           = [your_mobile_war_deployment_servoy_installation]
#mobile.deploy.webapps.dir                  = ${deploy.servoy.install.dir}/application_server/server/webapps

# 1 hour time-out; edit this as needed - depending on how long it usually takes for your solutions to run unit tests (should probably be lower in most cases)

unit.test.timeout                   = 3600000

# 'e2e.scripts.dir' points to where you keep the e2e (selenium/protractor) scripts that should be used with your solution(s)

e2e.scripts.dir                     = ${workspace.solutions.dir}/build_files/e2e_test_scripts

# 'e2e.tomcat.start_stop.tools.tomcat' can be set/uncommented if e2e tests should use the tomcat from 'software_factory_build_tools' repo
# if you use an already-started and configured (user with deploy rights) tomcat instance leave this commented out and change the other
# e2e.tomcat.xyz properties as needed

#e2e.tomcat.start_stop.tools.tomcat  = yep

# the following e2e tomcat settings are by default matching the tomcat from 'software_factory_build_tools' repository

e2e.tomcat.dir                      = ${basedir}/apache-tomcat-8.0.32
e2e.tomcat.base.url                 = http://localhost:8083
e2e.tomcat.manager.url              = ${e2e.tomcat.base.url}/manager/text
e2e.tomcat.username                 = tomcat
e2e.tomcat.password                 = tomcat@servoy
e2e.tomcat.java.home                = ${JAVA_HOME}

# DEPLOY tomcat settings (used if build.deploy is set) - this must be a running TOMCAT who's given user has the right to upload wars

deploy.tomcat.manager.url           = http://localhost:8082/manager/text
deploy.tomcat.username              = username
deploy.tomcat.password              = password

# ------------------------------------------------------------------------------------------------
# Other properties that you can change but you can use defaults as well --------------------------
# ------------------------------------------------------------------------------------------------

# Paths to other downloaded tools that we need for mobile unit testing; chrome driver is only needed if not executing mobile tests in SauceLabs cloud, but locally

webdriver.chrome.driver             = [path_to_the_downloaded_selenium_chrome_driver_executable]

# used directories / files / settings 

# If you are using a Servoy version < 7.3 please uncomment the following (otherwise leave it as it is;
# setting it to "false" or "nope" is not the same as commenting it); the old way should work on 7.3 or
# newer as well, but not the other way around; new way only gets rid of some unneeded exporter
# initialization time in case multiple solutions need to be exported

#servoy.install.lower.then.7.3       = yep

antScripts.dir                      = ${basedir}
results.dir                         = ${antScripts.dir}/../buildResults

jsunit.results.dir                  = ${results.dir}/jsunit_results
e2e.results.dir                     = ${results.dir}/e2e_results
export.results.dir                  = ${results.dir}/exports

export.logs.dir                     = ${export.results.dir}/logs
jsunit.logs.dir                     = ${jsunit.results.dir}/logs
e2e.logs.dir                        = ${e2e.results.dir}/logs

export.servoy.properties            = ${servoy.properties.dir}/exporter_servoy.properties
jsunit.servoy.properties            = ${servoy.properties.dir}/unit_test_servoy.properties
e2e.servoy.properties               = ${servoy.properties.dir}/e2e_test_servoy.properties
deploy.servoy.properties            = ${servoy.properties.dir}/deploy_on_success_servoy.properties

smart.test.exports.dir              = ${export.results.dir}/smartExports
mobile.export.dir                   = ${export.results.dir}/mobileExports
e2e.export.dir                      = ${export.results.dir}/e2eExports
deploy.export.dir                   = ${export.results.dir}/deploymentExports
mobile.test.war.dir                 = ${mobile.export.dir}/war
mobile.service.export.dir           = ${mobile.export.dir}/service

# the following 2 are just temporary locations
mobile.deploy.w.dir                 = ${mobile.export.dir}/prepare_deploy/war
mobile.deploy.s.dir                 = ${mobile.export.dir}/prepare_deploy/service

# this folder can be monitored by the separate "deployment" Servoy installation
# so that when a .servoy changes in it it gets automatically uploaded (see wiki page "Building a Software Factory")
passed.exports.dir                  = ${results.dir}/passedExports
passed.sc.exports.dir               = ${passed.exports.dir}/smart_client
passed.mc.exports.dir               = ${passed.exports.dir}/mobile_client

lib.dir                             = ${jsunit.results.dir}/temp/lib

servoy.developer.dir                = ${servoy.install.dir}/developer
servoy.app_server.dir               = ${servoy.install.dir}/application_server

ant_contrib.jar.location            = ${basedir}/ant-contrib/ant-contrib-1.0b3.jar

e2e.testing.dir                     = ${antScripts.dir}/e2e
# war deployments Servoy app. server log files will be generated in below location
e2e.servoy_user_home.dir            = ${e2e.results.dir}/temp/servoy_user_home

